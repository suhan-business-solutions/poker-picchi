package com.sbs.pokerp.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.sbs.pokerp.model.PokerTablePlayer;
import com.sbs.pokerp.model.PokerTablePlayerModel;
import com.sbs.pokerp.service.persistence.PokerTablePlayerPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PokerTablePlayer service. Represents a row in the &quot;pokerp_PokerTablePlayer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sbs.pokerp.model.PokerTablePlayerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PokerTablePlayerImpl}.
 * </p>
 *
 * @author jpnaidu
 * @see PokerTablePlayerImpl
 * @see com.sbs.pokerp.model.PokerTablePlayer
 * @see com.sbs.pokerp.model.PokerTablePlayerModel
 * @generated
 */
public class PokerTablePlayerModelImpl extends BaseModelImpl<PokerTablePlayer>
    implements PokerTablePlayerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a PokerTablePlayer model instance should use the {@link com.sbs.pokerp.model.PokerTablePlayer} interface instead.
     */
    public static final String TABLE_NAME = "pokerp_PokerTablePlayer";
    public static final Object[][] TABLE_COLUMNS = {
            { "gameId", Types.BIGINT },
            { "playerId", Types.BIGINT },
            { "timeJoined", Types.TIMESTAMP },
            { "timeLeft", Types.TIMESTAMP },
            { "amountWon", Types.DOUBLE },
            { "createdBy", Types.VARCHAR },
            { "createdDate", Types.TIMESTAMP },
            { "updatedBy", Types.VARCHAR },
            { "updatedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table pokerp_PokerTablePlayer (gameId LONG not null,playerId LONG not null,timeJoined DATE null,timeLeft DATE null,amountWon DOUBLE,createdBy VARCHAR(75) null,createdDate DATE null,updatedBy VARCHAR(75) null,updatedDate DATE null,primary key (gameId, playerId))";
    public static final String TABLE_SQL_DROP = "drop table pokerp_PokerTablePlayer";
    public static final String ORDER_BY_JPQL = " ORDER BY pokerTablePlayer.createdDate ASC";
    public static final String ORDER_BY_SQL = " ORDER BY pokerp_PokerTablePlayer.createdDate ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sbs.pokerp.model.PokerTablePlayer"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sbs.pokerp.model.PokerTablePlayer"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.sbs.pokerp.model.PokerTablePlayer"),
            true);
    public static long GAMEID_COLUMN_BITMASK = 1L;
    public static long PLAYERID_COLUMN_BITMASK = 2L;
    public static long CREATEDDATE_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sbs.pokerp.model.PokerTablePlayer"));
    private static ClassLoader _classLoader = PokerTablePlayer.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PokerTablePlayer.class
        };
    private long _gameId;
    private long _originalGameId;
    private boolean _setOriginalGameId;
    private long _playerId;
    private long _originalPlayerId;
    private boolean _setOriginalPlayerId;
    private Date _timeJoined;
    private Date _timeLeft;
    private double _amountWon;
    private String _createdBy;
    private Date _createdDate;
    private String _updatedBy;
    private Date _updatedDate;
    private long _columnBitmask;
    private PokerTablePlayer _escapedModel;

    public PokerTablePlayerModelImpl() {
    }

    @Override
    public PokerTablePlayerPK getPrimaryKey() {
        return new PokerTablePlayerPK(_gameId, _playerId);
    }

    @Override
    public void setPrimaryKey(PokerTablePlayerPK primaryKey) {
        setGameId(primaryKey.gameId);
        setPlayerId(primaryKey.playerId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new PokerTablePlayerPK(_gameId, _playerId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((PokerTablePlayerPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return PokerTablePlayer.class;
    }

    @Override
    public String getModelClassName() {
        return PokerTablePlayer.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("gameId", getGameId());
        attributes.put("playerId", getPlayerId());
        attributes.put("timeJoined", getTimeJoined());
        attributes.put("timeLeft", getTimeLeft());
        attributes.put("amountWon", getAmountWon());
        attributes.put("createdBy", getCreatedBy());
        attributes.put("createdDate", getCreatedDate());
        attributes.put("updatedBy", getUpdatedBy());
        attributes.put("updatedDate", getUpdatedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long gameId = (Long) attributes.get("gameId");

        if (gameId != null) {
            setGameId(gameId);
        }

        Long playerId = (Long) attributes.get("playerId");

        if (playerId != null) {
            setPlayerId(playerId);
        }

        Date timeJoined = (Date) attributes.get("timeJoined");

        if (timeJoined != null) {
            setTimeJoined(timeJoined);
        }

        Date timeLeft = (Date) attributes.get("timeLeft");

        if (timeLeft != null) {
            setTimeLeft(timeLeft);
        }

        Double amountWon = (Double) attributes.get("amountWon");

        if (amountWon != null) {
            setAmountWon(amountWon);
        }

        String createdBy = (String) attributes.get("createdBy");

        if (createdBy != null) {
            setCreatedBy(createdBy);
        }

        Date createdDate = (Date) attributes.get("createdDate");

        if (createdDate != null) {
            setCreatedDate(createdDate);
        }

        String updatedBy = (String) attributes.get("updatedBy");

        if (updatedBy != null) {
            setUpdatedBy(updatedBy);
        }

        Date updatedDate = (Date) attributes.get("updatedDate");

        if (updatedDate != null) {
            setUpdatedDate(updatedDate);
        }
    }

    @Override
    public long getGameId() {
        return _gameId;
    }

    @Override
    public void setGameId(long gameId) {
        _columnBitmask |= GAMEID_COLUMN_BITMASK;

        if (!_setOriginalGameId) {
            _setOriginalGameId = true;

            _originalGameId = _gameId;
        }

        _gameId = gameId;
    }

    public long getOriginalGameId() {
        return _originalGameId;
    }

    @Override
    public long getPlayerId() {
        return _playerId;
    }

    @Override
    public void setPlayerId(long playerId) {
        _columnBitmask |= PLAYERID_COLUMN_BITMASK;

        if (!_setOriginalPlayerId) {
            _setOriginalPlayerId = true;

            _originalPlayerId = _playerId;
        }

        _playerId = playerId;
    }

    public long getOriginalPlayerId() {
        return _originalPlayerId;
    }

    @Override
    public Date getTimeJoined() {
        return _timeJoined;
    }

    @Override
    public void setTimeJoined(Date timeJoined) {
        _timeJoined = timeJoined;
    }

    @Override
    public Date getTimeLeft() {
        return _timeLeft;
    }

    @Override
    public void setTimeLeft(Date timeLeft) {
        _timeLeft = timeLeft;
    }

    @Override
    public double getAmountWon() {
        return _amountWon;
    }

    @Override
    public void setAmountWon(double amountWon) {
        _amountWon = amountWon;
    }

    @Override
    public String getCreatedBy() {
        if (_createdBy == null) {
            return StringPool.BLANK;
        } else {
            return _createdBy;
        }
    }

    @Override
    public void setCreatedBy(String createdBy) {
        _createdBy = createdBy;
    }

    @Override
    public Date getCreatedDate() {
        return _createdDate;
    }

    @Override
    public void setCreatedDate(Date createdDate) {
        _columnBitmask = -1L;

        _createdDate = createdDate;
    }

    @Override
    public String getUpdatedBy() {
        if (_updatedBy == null) {
            return StringPool.BLANK;
        } else {
            return _updatedBy;
        }
    }

    @Override
    public void setUpdatedBy(String updatedBy) {
        _updatedBy = updatedBy;
    }

    @Override
    public Date getUpdatedDate() {
        return _updatedDate;
    }

    @Override
    public void setUpdatedDate(Date updatedDate) {
        _updatedDate = updatedDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public PokerTablePlayer toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PokerTablePlayer) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PokerTablePlayerImpl pokerTablePlayerImpl = new PokerTablePlayerImpl();

        pokerTablePlayerImpl.setGameId(getGameId());
        pokerTablePlayerImpl.setPlayerId(getPlayerId());
        pokerTablePlayerImpl.setTimeJoined(getTimeJoined());
        pokerTablePlayerImpl.setTimeLeft(getTimeLeft());
        pokerTablePlayerImpl.setAmountWon(getAmountWon());
        pokerTablePlayerImpl.setCreatedBy(getCreatedBy());
        pokerTablePlayerImpl.setCreatedDate(getCreatedDate());
        pokerTablePlayerImpl.setUpdatedBy(getUpdatedBy());
        pokerTablePlayerImpl.setUpdatedDate(getUpdatedDate());

        pokerTablePlayerImpl.resetOriginalValues();

        return pokerTablePlayerImpl;
    }

    @Override
    public int compareTo(PokerTablePlayer pokerTablePlayer) {
        int value = 0;

        value = DateUtil.compareTo(getCreatedDate(),
                pokerTablePlayer.getCreatedDate());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PokerTablePlayer)) {
            return false;
        }

        PokerTablePlayer pokerTablePlayer = (PokerTablePlayer) obj;

        PokerTablePlayerPK primaryKey = pokerTablePlayer.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        PokerTablePlayerModelImpl pokerTablePlayerModelImpl = this;

        pokerTablePlayerModelImpl._originalGameId = pokerTablePlayerModelImpl._gameId;

        pokerTablePlayerModelImpl._setOriginalGameId = false;

        pokerTablePlayerModelImpl._originalPlayerId = pokerTablePlayerModelImpl._playerId;

        pokerTablePlayerModelImpl._setOriginalPlayerId = false;

        pokerTablePlayerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PokerTablePlayer> toCacheModel() {
        PokerTablePlayerCacheModel pokerTablePlayerCacheModel = new PokerTablePlayerCacheModel();

        pokerTablePlayerCacheModel.gameId = getGameId();

        pokerTablePlayerCacheModel.playerId = getPlayerId();

        Date timeJoined = getTimeJoined();

        if (timeJoined != null) {
            pokerTablePlayerCacheModel.timeJoined = timeJoined.getTime();
        } else {
            pokerTablePlayerCacheModel.timeJoined = Long.MIN_VALUE;
        }

        Date timeLeft = getTimeLeft();

        if (timeLeft != null) {
            pokerTablePlayerCacheModel.timeLeft = timeLeft.getTime();
        } else {
            pokerTablePlayerCacheModel.timeLeft = Long.MIN_VALUE;
        }

        pokerTablePlayerCacheModel.amountWon = getAmountWon();

        pokerTablePlayerCacheModel.createdBy = getCreatedBy();

        String createdBy = pokerTablePlayerCacheModel.createdBy;

        if ((createdBy != null) && (createdBy.length() == 0)) {
            pokerTablePlayerCacheModel.createdBy = null;
        }

        Date createdDate = getCreatedDate();

        if (createdDate != null) {
            pokerTablePlayerCacheModel.createdDate = createdDate.getTime();
        } else {
            pokerTablePlayerCacheModel.createdDate = Long.MIN_VALUE;
        }

        pokerTablePlayerCacheModel.updatedBy = getUpdatedBy();

        String updatedBy = pokerTablePlayerCacheModel.updatedBy;

        if ((updatedBy != null) && (updatedBy.length() == 0)) {
            pokerTablePlayerCacheModel.updatedBy = null;
        }

        Date updatedDate = getUpdatedDate();

        if (updatedDate != null) {
            pokerTablePlayerCacheModel.updatedDate = updatedDate.getTime();
        } else {
            pokerTablePlayerCacheModel.updatedDate = Long.MIN_VALUE;
        }

        return pokerTablePlayerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{gameId=");
        sb.append(getGameId());
        sb.append(", playerId=");
        sb.append(getPlayerId());
        sb.append(", timeJoined=");
        sb.append(getTimeJoined());
        sb.append(", timeLeft=");
        sb.append(getTimeLeft());
        sb.append(", amountWon=");
        sb.append(getAmountWon());
        sb.append(", createdBy=");
        sb.append(getCreatedBy());
        sb.append(", createdDate=");
        sb.append(getCreatedDate());
        sb.append(", updatedBy=");
        sb.append(getUpdatedBy());
        sb.append(", updatedDate=");
        sb.append(getUpdatedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.sbs.pokerp.model.PokerTablePlayer");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>gameId</column-name><column-value><![CDATA[");
        sb.append(getGameId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>playerId</column-name><column-value><![CDATA[");
        sb.append(getPlayerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>timeJoined</column-name><column-value><![CDATA[");
        sb.append(getTimeJoined());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>timeLeft</column-name><column-value><![CDATA[");
        sb.append(getTimeLeft());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>amountWon</column-name><column-value><![CDATA[");
        sb.append(getAmountWon());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdBy</column-name><column-value><![CDATA[");
        sb.append(getCreatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createdDate</column-name><column-value><![CDATA[");
        sb.append(getCreatedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updatedBy</column-name><column-value><![CDATA[");
        sb.append(getUpdatedBy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>updatedDate</column-name><column-value><![CDATA[");
        sb.append(getUpdatedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
